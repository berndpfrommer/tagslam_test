tagslam_parameters:
# optimizer mode: full (full optimization, no iSAM2 used)
#                 slow (use iSAM2, but test for error and use full if error is large)
#                 fast (iSAM2 only, no test for error)
# default: slow
  optimizer_mode: fast
# minimum angle [in degrees] between optical axis and tag surface
  minimum_viewing_angle: 12.0
# number of incremental updates before running
# a full graph optimization (default: 50)
  max_num_incremental_opt: 50
# estimated error of tag corner detector
  pixel_noise: 1.0
# maximum allowed subgraph error. If error is above that,
# the frame is thrown away, the measurement ignored.
  max_subgraph_error: 50.0
# Noise with which the subgraph absolute priors will be
# pinned down. This parameter usually does not need to be touched.
  subgraph_abs_prior_position_noise: 0.1
  subgraph_abs_prior_rotation_noise: 0.1
# if the time stamps (header.stamp) of your data messages are not
# identical (hardware synced), set this option to true, and
# tagslam tries to line them up as well as possible. Expect larger errors
# because the data is not truly synchronous.
  use_approximate_sync: true
  amnesia: false
body_defaults:
  position_noise: 0.05
  rotation_noise: 0.01
default_body: yard
bodies:
 - yard:
     is_static: true
     default_tag_size: 0.42
     pose:
       position:
         x: 0
         y: 0
         z: 0
       rotation:
         x: 0
         y: 0
         z: 0
       position_noise:
         x: 0.0001
         y: 0.0001
         z: 0.0001
       rotation_noise:
         x: 1.0e-05
         y: 1.0e-05
         z: 1.0e-05
     type: simple
     tags:
     - id: 3
       size: 0.42
       pose:
         position:
           x: 0.0
           y: 0.0
           z: 1.5
         rotation:
           x: 0.0
           y: -1.5708
           z: 0.0
         position_noise:
           x: 0.0001
           y: 0.0001
           z: 0.0001
         rotation_noise:
           x: 1.0e-05
           y: 1.0e-05
           z: 1.0e-05
 - rig:
     ignore_tags: []
     is_static: false
     type: simple
     odom_topic: "/camera/odom/sample"
     odom_frame_id: "camera_pose_frame" #child frame of the odom topic
     odom_acceleration_noise_min: 5.0
     odom_acceleration_noise_max: 40.0
     odom_angular_acceleration_noise_min: 5.0
     odom_angular_acceleration_noise_max: 40.0
     odom_translation_noise: 0.02
     odom_rotation_noise: 0.02
     
     # transform between the rig body and the
     # body for which the odometry is computed.
     
     # Got this by the following procedure, using the static transforms
     # buried in the original bag:
     # 
     # rosrun tf2_tools echo.py camera_pose_frame camera_fisheye1_optical_frame
     #
     # This prints out a quaternion q = [0.503, -0.497, 0.498, -0.501]
     #
     # Go into python shell, import numpy as np, and do this:
     #
     # q = np.array([0.503, -0.497, 0.498, -0.501])
     # rotvec = np.arccos(q[3])/np.sin(np.arccos(q[3]))*q[0:3]
     # rotvec

     T_body_odom:
       position:
         x: 0.000
         y: 0.032
         z: 0.000
       rotation:
         x:  1.21793871
         y: -1.20341061
         z:  1.21309601
